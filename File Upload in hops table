import React, { useState } from "react";
import {
  Table, TableBody, TableCell, TableHead, TableHeader, TableRow,
} from "@/app/components/ui/table";
import { Checkbox } from "@/app/components/ui/checkbox";
import { MultiSelect } from "@/app/components/ui/multiselect";
import { Button } from "@/app/components/ui/button";
import { Paperclip, Trash2 } from "lucide-react";
import { Input } from "@/app/components/ui/input";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "../../ui/tooltip";
import FileUploadDialog from "./FileUploadDialog";
import { HopsTableProps } from "@/types/trips-type";
import { ActionType } from "@/types/unions";
import { CREATE_TRIP_CONST } from "@/utils/constants";

const HopsTable: React.FC<HopsTableProps> = ({
  hops,
  LocationOptions,
  actionOptions,
  onCheckboxChange,
  onPickupQuantityChange,
  onDeliveryQuantityChange,
  onHopActionsChange,
  onRemoveHop,
  onNotesChange,
  onFilesChange,
}) => {
  const [fileDialogState, setFileDialogState] = useState({
    isOpen: false,
    hopId: "",
    hopName: "",
  });

  const [uploadedFiles, setUploadedFiles] = useState<Record<string, File[]>>({});

  const handleOpenFileDialog = (hopId: string, hopName: string) => {
    setFileDialogState({ isOpen: true, hopId, hopName });
  };

  const handleCloseFileDialog = () => {
    setFileDialogState((prev) => ({ ...prev, isOpen: false }));
  };

  const handleSaveFiles = (files: File[]) => {
    setUploadedFiles((prev) => ({
      ...prev,
      [fileDialogState.hopId]: files,
    }));
    onFilesChange(fileDialogState.hopId, files);
  };

  const getCurrentFiles = (hopId: string) => uploadedFiles[hopId] || [];

  if (!hops.length) return null;

  return (
    <>
      <Table>
        <TableHeader>
          <TableRow>
            <TableHead className="w-[50px]">Source</TableHead>
            <TableHead className="w-[50px]">Destination</TableHead>
            <TableHead className="w-[100px]">Location</TableHead>
            <TableHead className="w-[220px]">Actions</TableHead>
            <TableHead className="w-[80px]">Pickup Qty</TableHead>
            <TableHead className="w-[80px]">Delivery Qty</TableHead>
            <TableHead className="w-[220px]">Notes</TableHead>
            <TableHead>Actions</TableHead>
          </TableRow>
        </TableHeader>

        <TableBody>
          {hops.map((hop) => {
            const isPickupSelected = hop.selectedActions.includes(CREATE_TRIP_CONST.ACTION.PICKUP);
            const isDeliverySelected = hop.selectedActions.includes(CREATE_TRIP_CONST.ACTION.DELIVERY);

            const pickupAction = hop.actions.find((a) => a.type === CREATE_TRIP_CONST.ACTION.PICKUP);
            const deliveryAction = hop.actions.find((a) => a.type === CREATE_TRIP_CONST.ACTION.DELIVERY);

            const displayPickupQuantity = isPickupSelected ? (pickupAction?.quantity || '') : '';
            const displayDeliveryQuantity = isDeliverySelected ? (deliveryAction?.quantity || '') : '';
            const fileCount = (uploadedFiles[hop.id]?.length || 0);

            return (
              <TableRow key={hop.id}>
                <TableCell>
                  <Checkbox
                    checked={hop.isSource}
                    onCheckedChange={(checked) =>
                      onCheckboxChange(hop.id, CREATE_TRIP_CONST.HOP_FIELDS[0], !!checked)
                    }
                    disabled={hop.isDestination}
                    className="cursor-not-allowed"
                  />
                </TableCell>

                <TableCell>
                  <Checkbox
                    checked={hop.isDestination}
                    onCheckedChange={(checked) =>
                      onCheckboxChange(hop.id, CREATE_TRIP_CONST.HOP_FIELDS[1], !!checked)
                    }
                    disabled={hop.isSource}
                    className="data-[state=checked]:bg-gray-800 data-[state=checked]:border-gray-800 border-gray-500 text-white"
                  />
                </TableCell>

                <TableCell>
                  <TooltipProvider>
                    <Tooltip>
                      <TooltipTrigger asChild>
                        <div className="truncate max-w-[100px] cursor-default">
                          {LocationOptions.find((opt) => opt._id === hop.locationId)?.name || hop.locationId}
                        </div>
                      </TooltipTrigger>
                      <TooltipContent>
                        <p>
                          {LocationOptions.find((opt) => opt._id === hop.locationId)?.name || hop.locationId}
                        </p>
                      </TooltipContent>
                    </Tooltip>
                  </TooltipProvider>
                </TableCell>

                <TableCell>
                  <MultiSelect
                    options={actionOptions}
                    selected={hop.selectedActions}
                    onChange={(actions) => onHopActionsChange(hop.id, actions as ActionType[])}
                    placeholder="Select Actions"
                  />
                </TableCell>

                <TableCell>
                  <Input
                    type="number"
                    min={0}
                    value={displayPickupQuantity}
                    onChange={(e) => {
                      const value = e.target.value;
                      const quantity = value === '' ? 0 : Number(value);
                      onPickupQuantityChange(hop.id, quantity);
                    }}
                    disabled={!isPickupSelected}
                    placeholder="0"
                  />
                </TableCell>

                <TableCell>
                  <Input
                    type="number"
                    min={0}
                    value={displayDeliveryQuantity}
                    onChange={(e) => {
                      const value = e.target.value;
                      const quantity = value === '' ? 0 : Number(value);
                      onDeliveryQuantityChange(hop.id, quantity);
                    }}
                    disabled={!isDeliverySelected}
                    placeholder="0"
                  />
                </TableCell>

                <TableCell>
                  <textarea
                    value={hop?.note || ""}
                    onChange={(e) => onNotesChange(hop.id, e.target.value)}
                    placeholder="Enter notes"
                    rows={2}
                    className="w-full h-full rounded-md border px-3 py-2 text-sm outline-none bg-background text-foreground placeholder:text-muted-foreground"
                  />
                </TableCell>

                <TableCell className="flex gap-2">
                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() => onRemoveHop(hop.id)}
                    className="cursor-pointer"
                  >
                    <Trash2 className="w-4 h-4" />
                  </Button>

                  <Button
                    variant="ghost"
                    size="icon"
                    onClick={() =>
                      handleOpenFileDialog(
                        hop.id,
                        LocationOptions.find((l) => l._id === hop.locationId)?.name || "Hop"
                      )
                    }
                    className="relative cursor-pointer"
                  >
                    <Paperclip className="w-4 h-4" />
                    {fileCount > 0 && (
                      <div className="absolute -top-1 -right-1 bg-green-500 text-white h-4 w-4 text-[10px] rounded-full flex items-center justify-center">
                        {fileCount}
                      </div>
                    )}
                  </Button>

                </TableCell>
              </TableRow>
            );
          })}
        </TableBody>
      </Table>

      <FileUploadDialog
        isOpen={fileDialogState.isOpen}
        onClose={handleCloseFileDialog}
        onSave={handleSaveFiles}
        currentFiles={getCurrentFiles(fileDialogState.hopId)}
        hopName={fileDialogState.hopName}
      />
    </>
  );
};

export default HopsTable;









import { useEffect, useState } from "react";
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "../../ui/dialog";
import { FileText, Upload, X, CheckCircle } from "lucide-react";
import { Input } from "../../ui/input";
import { Button } from "../../ui/button";

interface FileUploadDialogProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (files: File[]) => void;
  currentFiles: File[];
  hopName: string;
}

const FileUploadDialog: React.FC<FileUploadDialogProps> = ({
  isOpen,
  onClose,
  onSave,
  currentFiles,
  hopName,
}) => {
  const [selectedFiles, setSelectedFiles] = useState<File[]>(currentFiles);
  const [dragActive, setDragActive] = useState(false);

  useEffect(() => {
    if (isOpen) {
      setSelectedFiles(currentFiles);
    }
  }, [isOpen, currentFiles]);

  const handleFileSelect = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    setSelectedFiles((prev) => [...prev, ...files]);
  };

  const handleRemoveFile = (index: number) => {
    setSelectedFiles((prev) => prev.filter((_, i) => i !== index));
  };

  const handleSave = () => {
    onSave(selectedFiles);
    onClose();
  };

  const handleCancel = () => {
    setSelectedFiles(currentFiles);
    onClose();
  };

  const handleDrag = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();

    if (e.type === "dragenter" || e.type === "dragover") {
      setDragActive(true);
    } else if (e.type === "dragleave") {
      setDragActive(false);
    }
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    e.stopPropagation();
    setDragActive(false);

    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {
      const files = Array.from(e.dataTransfer.files);
      setSelectedFiles((prev) => [...prev, ...files]);
    }
  };

  const formatFileSize = (bytes: number) => {
    if (bytes === 0) return "0 Bytes";
    const k = 1024;
    const sizes = ["Bytes", "KB", "MB", "GB"];
    const i = Math.floor(Math.log(bytes) / Math.log(k));
    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="sm:max-w-[600px] max-h-[85vh] overflow-y-auto  rounded-[4px]">
        <DialogHeader>
          <DialogTitle>Upload Files - {hopName}</DialogTitle>
        </DialogHeader>

        <div className="space-y-4">
          <div
            className={`relative border-2 border-dashed rounded-xl p-8 text-center transition-all duration-200 ${dragActive
              ? "border-blue-400 bg-blue-50"
              : selectedFiles.length > 0
                ? "border-green-400 bg-green-50"
                : "border-gray-300 hover:border-blue-300 hover:bg-gray-50 hover:text-gray-800"
              }`}
            onDragEnter={handleDrag}
            onDragLeave={handleDrag}
            onDragOver={handleDrag}
            onDrop={handleDrop}
          >
            <Input
              id="file-upload"
              type="file"
              multiple
              onChange={handleFileSelect}
              className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
              accept=".pdf,.doc,.docx,.jpg,.jpeg,.png,.txt,.xlsx,.xls,.csv"
            />

            <div className="space-y-3">
              {selectedFiles.length > 0 ? (
                <div className="space-y-3">
                  <div className="flex items-center justify-center w-12 h-12 bg-green-100 rounded-full mx-auto">
                    <FileText className="h-6 w-6 text-green-600" />
                  </div>
                  <div>
                    <p className="font-medium text-gray-700 text-sm">
                      {selectedFiles.length} file(s) selected
                    </p>
                  </div>
                  <div className="flex justify-center items-center gap-2 text-sm text-green-600">
                    <CheckCircle className="h-4 w-4" />
                    Ready to import
                  </div>
                </div>
              ) : (
                <div className="space-y-3">
                  <div className="flex items-center justify-center w-12 h-12 bg-gray-100 rounded-full mx-auto">
                    <Upload className="h-6 w-6 text-gray-400" />
                  </div>
                  <div>
                    <p className="text-[16px] font-medium">Drop your files here</p>
                    <p className="text-gray-500 text-sm">or click to browse files</p>
                  </div>
                  <p className="text-xs text-gray-400">
                    Supported: PDF, DOC, DOCX, JPG, PNG, TXT, XLSX, CSV up to 10MB each
                  </p>
                </div>
              )}
            </div>
          </div>

          {/* Selected Files List */}
          {selectedFiles.length > 0 && (
            <div className="space-y-2 max-h-[300px] overflow-y-auto">
              <h4 className="font-medium text-sm">Selected Files</h4>
              {selectedFiles.map((file, index) => (
                <div
                  key={index}
                  className="flex items-center justify-between p-3 bg-gray-50 rounded-lg border"
                >
                  <div className="flex items-center space-x-3 flex-1 min-w-0">
                    <FileText className="w-4 h-4 text-gray-500 flex-shrink-0" />
                    <div className="min-w-0 flex-1">
                      <p className="text-sm font-medium text-gray-900 truncate">
                        {file.name}
                      </p>
                      <p className="text-xs text-gray-500">
                        {formatFileSize(file.size)}
                      </p>
                    </div>
                  </div>
                  <Button
                    variant="ghost"
                    size="sm"
                    onClick={() => handleRemoveFile(index)}
                    className="text-red-500 hover:text-red-700 hover:bg-red-50"
                  >
                    <X className="w-4 h-4" />
                  </Button>
                </div>
              ))}
            </div>
          )}
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={handleCancel}>
            Cancel
          </Button>
          <Button onClick={handleSave} className="bg-blue-500 hover:bg-blue-600">
            Done ({selectedFiles.length} files)
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default FileUploadDialog;

